{"name":"BPE","tagline":"Business Process Engine","body":"Business Process Engine\r\n=======================\r\n\r\nOverview\r\n--------\r\n\r\nBPE is Synrc Cloud Stack Erlang Application that bring Erlang for for Enterprise.\r\nIt provides infrastructure for Workflow Definitions, Process Orchestration,\r\nRule Based Production Systems and Distributed Storage.\r\n\r\nWorkflow Engine\r\n===============\r\n\r\nWorkflow Engine -- is an Erlang/OTP application which handles process definitions,\r\nprocess instances, and provides very clean API for Workplaces.\r\n\r\nProcess Schema\r\n--------------\r\n\r\nBefore using Process Engine you need to define the set of business process\r\nworkflows of your enterprise. This could be done via Erlang terms or some DSL\r\nthat lately converted to Erlang terms. Internally BPE uses Eralng terms\r\nworkflow definition:\r\n\r\n```erlang\r\nbpe:start(\r\n   #process{name=\"Order11\",\r\n       flows=[ #sequenceFlow{source=\"begin\",target=\"end2\"},\r\n               #sequenceFlow{source=\"end2\",target=\"end\"}],\r\n       tasks=[ #userTask{name=\"begin\"},\r\n               #userTask{name=\"end2\"},\r\n               #endEvent{name=\"end\"}],\r\n       task=\"begin\",beginEvent=\"begin\",endEvent=\"end\"},[]).\r\n\r\n```\r\n\r\nThe worklow definiton uses following persistent workflow model which is stored in KVS:\r\n\r\n```erlang\r\n-record(task,         { name, id, roles, module }).\r\n-record(userTask,     { name, id, roles, module }).\r\n-record(serviceTask,  { name, id, roles, module }).\r\n-record(messageEvent, { name, id, payload }).\r\n-record(beginEvent ,   { name, id }).\r\n-record(endEvent,      { name, id }).\r\n-record(sequenceFlow, { name, id, source, target }).\r\n-record(history,      { ?ITERATOR(feed,true), name, task }).\r\n-record(process,      { ?ITERATOR(feed,true), name,\r\n                        roles=[], tasks=[], events=[], history=[], flows=[],\r\n                        rules, docs=[],\r\n                        task,\r\n                        beginEvent, endEvent }).\r\n```\r\n\r\nFull set of BPMN 2.0 fields could be obtainer at [http://www.omg.org/spec/BPMN/2.0](http://www.omg.org/spec/BPMN/2.0) page 3-7.\r\n\r\nSample Session\r\n--------------\r\n\r\n```erlang\r\n(bpe@127.0.0.1)1> kvs:join().\r\nok\r\n(bpe@127.0.0.1)1> rr(bpe).\r\n[beginEvent,container,endEvent,history,id_seq,iterator,\r\n messageEvent,process,sequenceFlow,serviceTask,task,userTask]\r\n(bpe@127.0.0.1)2> bpe:start(#process{name=\"Order11\",\r\n         flows=[#sequenceFlow{source=\"begin\",target=\"end2\"},\r\n                #sequenceFlow{source=\"end2\",target=\"end\"}],\r\n         tasks=[#userTask{name=\"begin\"},\r\n                #userTask{name=\"end2\"},\r\n                #endEvent{name=\"end\"}],\r\n         task=\"begin\",beginEvent=\"begin\",endEvent=\"end\"},[]).\r\nbpe_proc:Process 39 spawned <0.12399.0>\r\n{ok,<0.12399.0>}\r\n(bpe@127.0.0.1)3> gen_server:call(pid(0,12399,0),{complete}).\r\n(bpe@127.0.0.1)4> gen_server:call(pid(0,12399,0),{complete}).\r\n(bpe@127.0.0.1)5> gen_server:call(pid(0,12399,0),{complete}).\r\n(bpe@127.0.0.1)5> bpe:history(39).\r\n[#history{id = 28,version = undefined,container = feed,\r\n          feed_id = {history,39},\r\n          prev = 27,next = undefined,feeds = [],guard = true,\r\n          etc = undefined,name = \"Order11\",\r\n          task = {task,\"end\"}},\r\n #history{id = 27,version = undefined,container = feed,\r\n          feed_id = {history,39},\r\n          prev = 26,next = 28,feeds = [],guard = true,etc = undefined,\r\n          name = \"Order11\",\r\n          task = {task,\"end2\"}},\r\n #history{id = 26,version = undefined,container = feed,\r\n          feed_id = {history,39},\r\n          prev = undefined,next = 27,feeds = [],guard = true,\r\n          etc = undefined,name = \"Order11\",\r\n          task = {task,\"begin\"}}]\r\n```\r\n\r\nProcess Instances\r\n-----------------\r\n\r\nInstantiation of process means creating persistent context of document flow.\r\n\r\n```erlang\r\nload(ProcName)\r\nstart(Proc,Docs)\r\namend(Proc,Docs)\r\ncomplete(Proc)\r\nhistory(ProcId)\r\ntask(Name,Proc)\r\ndoc(Name,Proc)\r\nevents(Proc)\r\ntasks(Proc)\r\n```\r\n\r\nUsing 'tasks' API you fetch current documents attached to the given\r\nprocess at particular stage. Using 'amend' API you could upload or\r\nchange document at current stage. 'push' API move current\r\nstage documents further by workflow.\r\n\r\nLet us see how we could initial 'Wire Transfer' transaction:\r\n\r\n```erlang\r\nbpe:load(\"WireTransfer\"),\r\nId = bpe:start('WireTransfer',[]),\r\n[] = bpe:tasks(Id), % current set is empty\r\nTasks = [ #'WireTranswerReq'{\r\n            beneficiary = #agent{ bank=\"SBININBB380\",\r\n                                  name=\"Namdak Tonpa\",\r\n                                  account=\"305820317\"},\r\n            subsidiary = #agent { bank=\"BKTRUS33\",\r\n                                  name=\"Maxim Sokhatsky\",\r\n                                  account=\"804250223\"}}],\r\n\r\nbpe:amend(Id,Tasks),\r\nbpe:push(Id),\r\n```\r\n\r\nDializer\r\n--------\r\n\r\nFor check API with dialyzer build with `rebar compile` and run `make dialyze`.\r\n\r\nCredits\r\n-------\r\n\r\n* Maxim Sokhatsky\r\n\r\nOM A HUM\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}